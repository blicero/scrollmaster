# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2024-09-02 19:58:32 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Scrollmaster
  Scrollmaster is a log aggregator and analyzer.
** Clock table
   #+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
   #+CAPTION: Clock summary at [2024-09-02 Mo 19:58]
   | Headline                | Time      |           |      |      |      |
   |-------------------------+-----------+-----------+------+------+------|
   | *Total time*            | *1d 2:52* |           |      |      |      |
   |-------------------------+-----------+-----------+------+------+------|
   | *Scrollmaster*          | *1d 2:52* |           |      |      |      |
   | \_  /Components [5/5]/  |           | /1d 2:52/ |      |      |      |
   | \_    Common [1/1]      |           |           | 3:46 |      |      |
   | \_      Paths           |           |           |      | 3:46 |      |
   | \_    Build script      |           |           | 1:15 |      |      |
   | \_    Model [0/0]       |           |           | 1:04 |      |      |
   | \_    Logreader [1/1]   |           |           | 4:01 |      |      |
   | \_      Journald        |           |           |      | 1:37 |      |
   | \_    Database [0/0]    |           |           | 3:40 |      |      |
   | \_    Server [3/3]      |           |           | 9:49 |      |      |
   | \_      Handling Agents |           |           |      | 2:59 |      |
   | \_        Cleanup login |           |           |      |      | 0:34 |
   | \_      Testing         |           |           |      | 1:12 |      |
   | \_    Agent [0/0]       |           |           | 3:17 |      |      |
   #+END:
** Features [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Components [5/5]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** Common [1/1]
**** DONE Paths
     CLOSED: [2024-08-31 Sa 01:07]
     :LOGBOOK:
     CLOCK: [2024-08-22 Do 17:46]--[2024-08-22 Do 18:20] =>  0:34
     CLOCK: [2024-08-21 Mi 17:45]--[2024-08-21 Mi 20:57] =>  3:12
     :END:
     I should make the handling of paths more ... sane and less tedious,
     similar to what I have used in Python.
*** Build script
    :LOGBOOK:
    CLOCK: [2024-08-14 Mi 22:20]--[2024-08-14 Mi 23:35] =>  1:15
    :END:
*** Model [0/0]
    :LOGBOOK:
    CLOCK: [2024-08-13 Di 21:05]--[2024-08-13 Di 22:09] =>  1:04
    :END:
*** Logreader [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-08-15 Do 20:14]--[2024-08-15 Do 22:38] =>  2:24
    :END:
    For the purpose of this application, I'll consider Linux as equal to "uses
    systemd-journald".
**** DONE Journald
     CLOSED: [2024-08-19 Mo 19:54]
     :LOGBOOK:
     CLOCK: [2024-08-19 Mo 18:45]--[2024-08-19 Mo 19:54] =>  1:09
     CLOCK: [2024-08-18 So 19:44]--[2024-08-18 So 20:12] =>  0:28
     :END:
*** Database [0/0]
    :LOGBOOK:
    CLOCK: [2024-08-30 Fr 23:21]--[2024-08-30 Fr 23:49] =>  0:28
    CLOCK: [2024-08-15 Do 19:15]--[2024-08-15 Do 19:57] =>  0:42
    CLOCK: [2024-08-14 Mi 19:21]--[2024-08-14 Mi 20:53] =>  1:32
    CLOCK: [2024-08-14 Mi 18:40]--[2024-08-14 Mi 19:15] =>  0:35
    CLOCK: [2024-08-14 Mi 18:26]--[2024-08-14 Mi 18:29] =>  0:03
    CLOCK: [2024-08-14 Mi 02:35]--[2024-08-14 Mi 02:55] =>  0:20
    :END:
*** Server [3/3]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-08-25 So 21:40]--[2024-08-25 So 23:25] =>  1:45
    CLOCK: [2024-08-25 So 18:02]--[2024-08-25 So 19:05] =>  1:03
    CLOCK: [2024-08-20 Di 18:01]--[2024-08-20 Di 20:51] =>  2:50
    :END:
    So, how do I want client and server to talk to each other? HTTP or
    something else? HTTP feels like it would be the easiest, but it *would* be
    fun to roll something myself.
    Nah, forget it, I'll just use HTTP. It takes a handful of problems off of
    my hands.
    I am not entirely sure, yet, if I want to use a web interface or a
    GUI. But using HTTP allows me to do both.
**** DONE Handling Agents
     CLOSED: [2024-09-02 Mo 19:58]
     :LOGBOOK:
     CLOCK: [2024-08-30 Fr 23:50]--[2024-08-31 Sa 00:21] =>  0:31
     CLOCK: [2024-08-30 Fr 17:14]--[2024-08-30 Fr 18:42] =>  1:28
     CLOCK: [2024-08-28 Mi 22:27]--[2024-08-28 Mi 22:32] =>  0:05
     CLOCK: [2024-08-28 Mi 21:24]--[2024-08-28 Mi 21:45] =>  0:21
     :END:
***** DONE Cleanup login
      CLOSED: [2024-09-02 Mo 19:57]
      :LOGBOOK:
      CLOCK: [2024-08-31 Sa 16:26]--[2024-08-31 Sa 17:00] =>  0:34
      :END:
**** DONE Testing
     CLOSED: [2024-09-02 Mo 19:57]
     :LOGBOOK:
     CLOCK: [2024-08-31 Sa 13:35]--[2024-08-31 Sa 14:03] =>  0:28
     CLOCK: [2024-08-27 Di 14:37]--[2024-08-27 Di 15:04] =>  0:27
     CLOCK: [2024-08-25 So 23:25]--[2024-08-25 So 23:42] =>  0:17
     :END:
     I have very little experience developing web applications, especially
     when it comes to dealing with cookies, session management, and
     authentication.
     So I am going to use testing as an opportunity to learn a little about this,
     and hopefully will end up with a Server that is well-tested and handles
     those things reasonably well.
*** Agent [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-09-02 Mo 18:16]--[2024-09-02 Mo 19:56] =>  1:40
    CLOCK: [2024-08-31 Sa 15:50]--[2024-08-31 Sa 16:26] =>  0:36
    CLOCK: [2024-08-31 Sa 14:45]--[2024-08-31 Sa 15:46] =>  1:01
    :END:
*** Frontend [0/0]
** Bugs [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
