# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2024-09-11 21:55:19 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Scrollmaster
  Scrollmaster is a log aggregator and analyzer.
** Clock table
   #+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
   #+CAPTION: Clock summary at [2024-09-11 Mi 21:55]
   | Headline                           | Time       |           |       |       |      |
   |------------------------------------+------------+-----------+-------+-------+------|
   | *Total time*                       | *2d 21:54* |           |       |       |      |
   |------------------------------------+------------+-----------+-------+-------+------|
   | *Scrollmaster*                     | *2d 21:54* |           |       |       |      |
   | \_  /Features [0/0]/               |            | /17:55/   |       |       |      |
   | \_    Search [1/3]                 |            |           | 17:15 |       |      |
   | \_      Limit results              |            |           |       |  0:34 |      |
   | \_    Analysis [0/0]               |            |           |  0:40 |       |      |
   | \_  /Components [11/12]/           |            | /2d 3:59/ |       |       |      |
   | \_    Main [0/0]                   |            |           |  0:59 |       |      |
   | \_    Common [1/1]                 |            |           |  3:46 |       |      |
   | \_      Paths                      |            |           |       |  3:46 |      |
   | \_    Build script                 |            |           |  1:15 |       |      |
   | \_    Model [0/0]                  |            |           |  1:04 |       |      |
   | \_    Logreader [1/1]              |            |           |  4:01 |       |      |
   | \_      Journald                   |            |           |       |  1:37 |      |
   | \_    Database [0/0]               |            |           |  3:40 |       |      |
   | \_    Server [4/4]                 |            |           | 10:03 |       |      |
   | \_      Handling Agents            |            |           |       |  3:13 |      |
   | \_        Handle Agents with FQDNs |            |           |       |       | 0:14 |
   | \_        Cleanup login            |            |           |       |       | 0:34 |
   | \_      Testing                    |            |           |       |  1:12 |      |
   | \_    Agent [4/4]                  |            |           |  5:28 |       |      |
   | \_      Don't be clingy            |            |           |       |  1:10 |      |
   | \_      Proper short form hostname |            |           |       |  0:03 |      |
   | \_      Throttle Agent             |            |           |       |  0:58 |      |
   | \_    Frontend [1/2]               |            |           | 21:43 |       |      |
   | \_      Filter [0/0]               |            |           |       | 18:07 |      |
   #+END:
** Features [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** Search [1/3]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-09-11 Mi 16:53]--[2024-09-11 Mi 21:55] =>  5:02
    CLOCK: [2024-09-10 Di 20:22]--[2024-09-10 Di 21:16] =>  0:54
    CLOCK: [2024-09-10 Di 17:53]--[2024-09-10 Di 19:12] =>  1:19
    CLOCK: [2024-09-09 Mo 23:09]--[2024-09-09 Mo 23:55] =>  0:46
    CLOCK: [2024-09-09 Mo 22:24]--[2024-09-09 Mo 22:45] =>  0:21
    CLOCK: [2024-09-09 Mo 19:45]--[2024-09-09 Mo 22:14] =>  2:29
    CLOCK: [2024-09-07 Sa 16:10]--[2024-09-07 Sa 19:28] =>  3:18
    CLOCK: [2024-09-07 Sa 14:50]--[2024-09-07 Sa 16:10] =>  1:20
    CLOCK: [2024-09-07 Sa 14:09]--[2024-09-07 Sa 14:47] =>  0:38
    CLOCK: [2024-09-07 Sa 11:17]--[2024-09-07 Sa 11:35] =>  0:18
    CLOCK: [2024-09-07 Sa 10:50]--[2024-09-07 Sa 11:06] =>  0:16
    :END:
    If I really expect using this, I have to work on my frontend skills
    somewhat. My current first attempt at build a search form is too ugly to
    bear.
    [2024-09-10 Di 00:05]
    The basic search functionality works. I'm a bit surprised, but it does
    work. The UI is uglier than a blobfish, but I will leave it at that for
    now.
**** Persistent searches [0/0]
     :PROPERTIES:
     :COOKIE_DATA: todo recursive
     :VISIBILITY: children
     :END:
     So here's what I'm going to do: I add a new table to the database to
     store searches that contains the following columns:
     | id        | INTEGER PRIMARY KEY  |
     | timestamp | INTEGER NOT NULL     |
     | search    | TEXT NOT NULL (JSON) |
     | results   | TEXT (JSON)          |
     Where search will contain a JSON representation of the search parameters
     and results will contain a JSON representation of an array of the IDs of
     the records that make up the result set.
**** TODO Limit results
     :LOGBOOK:
     CLOCK: [2024-09-10 Di 19:12]--[2024-09-10 Di 19:46] =>  0:34
     :END:
     Large numbers of search results can somewhat overwhelm the browser even
     on my relatively beefy desktop (Ryzen 5700X, 32GB RAM)
     I would have to paginate the results, which means retaining a lot more
     state on the server side.
     That would not work as an Ajax query. The search (not that I dislike the
     idea) becomes an entity in its own  right.
**** DONE Case-sensitivity optional
     CLOSED: [2024-09-10 Di 19:50]
**** TODO Validate patterns before performing search?
     My first attempt was to parse the patterns in Javascript, but of course
     Javascript has a different regex engine than Go, so it doesn't buy me
     anything.
*** Analysis [0/0]
    :LOGBOOK:
    CLOCK: [2024-09-10 Di 17:10]--[2024-09-10 Di 17:50] =>  0:40
    :END:
    I would like to perform a little analysis on the log records I
    gather. Basically, sniff out the ones that are somehow urgent or
    interesting in some way.
** Components [11/12]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** Main [0/0]
    :LOGBOOK:
    CLOCK: [2024-09-03 Di 18:21]--[2024-09-03 Di 19:20] =>  0:59
    :END:
    I am approaching the point where I need a full live environment to see how
    this works.
*** Common [1/1]
**** DONE Paths
     CLOSED: [2024-08-31 Sa 01:07]
     :LOGBOOK:
     CLOCK: [2024-08-22 Do 17:46]--[2024-08-22 Do 18:20] =>  0:34
     CLOCK: [2024-08-21 Mi 17:45]--[2024-08-21 Mi 20:57] =>  3:12
     :END:
     I should make the handling of paths more ... sane and less tedious,
     similar to what I have used in Python.
*** Build script
    :LOGBOOK:
    CLOCK: [2024-08-14 Mi 22:20]--[2024-08-14 Mi 23:35] =>  1:15
    :END:
*** Model [0/0]
    :LOGBOOK:
    CLOCK: [2024-08-13 Di 21:05]--[2024-08-13 Di 22:09] =>  1:04
    :END:
*** Logreader [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-08-15 Do 20:14]--[2024-08-15 Do 22:38] =>  2:24
    :END:
    For the purpose of this application, I'll consider Linux as equal to "uses
    systemd-journald".
**** DONE Journald
     CLOSED: [2024-08-19 Mo 19:54]
     :LOGBOOK:
     CLOCK: [2024-08-19 Mo 18:45]--[2024-08-19 Mo 19:54] =>  1:09
     CLOCK: [2024-08-18 So 19:44]--[2024-08-18 So 20:12] =>  0:28
     :END:
*** Database [0/0]
    :LOGBOOK:
    CLOCK: [2024-08-30 Fr 23:21]--[2024-08-30 Fr 23:49] =>  0:28
    CLOCK: [2024-08-15 Do 19:15]--[2024-08-15 Do 19:57] =>  0:42
    CLOCK: [2024-08-14 Mi 19:21]--[2024-08-14 Mi 20:53] =>  1:32
    CLOCK: [2024-08-14 Mi 18:40]--[2024-08-14 Mi 19:15] =>  0:35
    CLOCK: [2024-08-14 Mi 18:26]--[2024-08-14 Mi 18:29] =>  0:03
    CLOCK: [2024-08-14 Mi 02:35]--[2024-08-14 Mi 02:55] =>  0:20
    :END:
*** Server [4/4]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-08-25 So 21:40]--[2024-08-25 So 23:25] =>  1:45
    CLOCK: [2024-08-25 So 18:02]--[2024-08-25 So 19:05] =>  1:03
    CLOCK: [2024-08-20 Di 18:01]--[2024-08-20 Di 20:51] =>  2:50
    :END:
    So, how do I want client and server to talk to each other? HTTP or
    something else? HTTP feels like it would be the easiest, but it *would* be
    fun to roll something myself.
    Nah, forget it, I'll just use HTTP. It takes a handful of problems off of
    my hands.
    I am not entirely sure, yet, if I want to use a web interface or a
    GUI. But using HTTP allows me to do both.
**** DONE Handling Agents
     CLOSED: [2024-09-02 Mo 19:58]
     :LOGBOOK:
     CLOCK: [2024-08-30 Fr 23:50]--[2024-08-31 Sa 00:21] =>  0:31
     CLOCK: [2024-08-30 Fr 17:14]--[2024-08-30 Fr 18:42] =>  1:28
     CLOCK: [2024-08-28 Mi 22:27]--[2024-08-28 Mi 22:32] =>  0:05
     CLOCK: [2024-08-28 Mi 21:24]--[2024-08-28 Mi 21:45] =>  0:21
     :END:
***** DONE Handle Agents with FQDNs
      CLOSED: [2024-09-04 Mi 13:44]
      :LOGBOOK:
      CLOCK: [2024-09-04 Mi 13:30]--[2024-09-04 Mi 13:44] =>  0:14
      :END:
***** DONE Cleanup login
      CLOSED: [2024-09-02 Mo 19:57]
      :LOGBOOK:
      CLOCK: [2024-08-31 Sa 16:26]--[2024-08-31 Sa 17:00] =>  0:34
      :END:
**** DONE Testing
     CLOSED: [2024-09-02 Mo 19:57]
     :LOGBOOK:
     CLOCK: [2024-08-31 Sa 13:35]--[2024-08-31 Sa 14:03] =>  0:28
     CLOCK: [2024-08-27 Di 14:37]--[2024-08-27 Di 15:04] =>  0:27
     CLOCK: [2024-08-25 So 23:25]--[2024-08-25 So 23:42] =>  0:17
     :END:
     I have very little experience developing web applications, especially
     when it comes to dealing with cookies, session management, and
     authentication.
     So I am going to use testing as an opportunity to learn a little about this,
     and hopefully will end up with a Server that is well-tested and handles
     those things reasonably well.
*** Agent [4/4]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-09-02 Mo 18:16]--[2024-09-02 Mo 19:56] =>  1:40
    CLOCK: [2024-08-31 Sa 15:50]--[2024-08-31 Sa 16:26] =>  0:36
    CLOCK: [2024-08-31 Sa 14:45]--[2024-08-31 Sa 15:46] =>  1:01
    :END:
**** DONE Don't be clingy
     CLOSED: [2024-09-04 Mi 14:59]
     :LOGBOOK:
     CLOCK: [2024-09-04 Mi 13:49]--[2024-09-04 Mi 14:59] =>  1:10
     :END:
     The Agent should not be more busy than it has to. When the most recent
     batch of records was smaller than the maximum permitted amount, maybe
     wait a little longer for the next run?
     Also, if the Server is not reachable, wait progressively longer for
     subsequent attempts?
**** CANCELLED Proper short form hostname
     CLOSED: [2024-09-04 Mi 13:29]
     :LOGBOOK:
     CLOCK: [2024-09-04 Mi 13:26]--[2024-09-04 Mi 13:29] =>  0:03
     :END:
     It would appear that on some systems, os.Hostname() returns the FQDN,
     e.g. schwarzgeraet.krylon.net instead of schwarzgeraet
     *CLOSED* The problem lies in the regex I use in the server to route URLs
**** DONE Uniqueness
     CLOSED: [2024-09-04 Mi 13:15]
     I want to avoid sending and receiving the same log record multiple times.
**** DONE Throttle Agent
     CLOSED: [2024-09-03 Di 20:40]
     :LOGBOOK:
     CLOCK: [2024-09-03 Di 19:41]--[2024-09-03 Di 20:39] =>  0:58
     :END:
     On my first test run, the Agent delivered more than a million records to
     the Server. Which /did/ work, but was rather painfully slow.
     I would like to make that less painful.
     Options are:
     - Limiting the number of records we submit per request
     - compression
     I think limiting the number of records per request is my best option,
     considering that the server has to deal with several Agents concurrently.
*** Frontend [1/2]
    :LOGBOOK:
    CLOCK: [2024-09-05 Do 23:56]--[2024-09-05 Do 23:57] =>  0:01
    CLOCK: [2024-09-05 Do 22:05]--[2024-09-05 Do 23:50] =>  1:45
    CLOCK: [2024-09-05 Do 20:07]--[2024-09-05 Do 21:57] =>  1:50
    :END:
    Okay, I declare the rest of the app sufficiently working that I can move
    on to the frontend. Since we already have a web server in place, a web
    frontend appears to be the logical approach.
**** TODO Filter [0/0]
     :LOGBOOK:
     CLOCK: [2024-09-06 Fr 16:59]--[2024-09-07 Sa 11:06] => 18:07
     :END:
**** DONE Search [0/0]
     CLOSED: [2024-09-09 Mo 23:56]
** Bugs [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
